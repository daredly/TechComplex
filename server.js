require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const bodyParser = require('body-parser');
const path = require('path');
const TelegramBot = require('node-telegram-bot-api');
const Order = require('./models/Order');
const Contact = require('./models/Contact');

const app = express();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
const corsOptions = {
    origin: ['https://*.onrender.com', 'http://localhost:3000'],
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization'],
    credentials: true
};

app.use(cors(corsOptions));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤
app.use(express.json()); // –¥–ª—è application/json
app.use(express.urlencoded({ extended: true })); // –¥–ª—è application/x-www-form-urlencoded
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static(path.join(__dirname)));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(process.env.MONGODB_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true
})
.then(() => console.log('Connected to MongoDB'))
.catch(err => console.error('MongoDB connection error:', err));

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
async function sendTelegramNotification(data, type) {
    try {
        const adminId = process.env.TELEGRAM_ADMIN_ID;
        let message = '';

        if (type === 'order') {
            message = `üõç –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n` +
                     `–ò–º—è: ${data.name}\n` +
                     `–§–∞–º–∏–ª–∏—è: ${data.surname}\n` +
                     `Email: ${data.email}\n` +
                     `–¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}\n` +
                     `–ö–æ–º–ø–∞–Ω–∏—è: ${data.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
                     `–£—Å–ª—É–≥–∞: ${data.service}\n` +
                     `–°–æ–æ–±—â–µ–Ω–∏–µ: ${data.message || '–ù–µ—Ç'}\n\n` +
                     `–î–∞—Ç–∞: ${new Date().toLocaleString()}`;
        } else if (type === 'contact') {
            message = `üìû –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n` +
                     `–ò–º—è: ${data.name}\n` +
                     `Email: ${data.email}\n` +
                     `–°–æ–æ–±—â–µ–Ω–∏–µ: ${data.message}\n\n` +
                     `–î–∞—Ç–∞: ${new Date().toLocaleString()}`;
        }

        await bot.sendMessage(adminId, message);
        return true;
    } catch (error) {
        console.error('Telegram notification error:', error);
        return false;
    }
}

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error('Error:', err);
    res.status(err.status || 500).json({
        success: false,
        message: err.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        error: process.env.NODE_ENV === 'development' ? err : {}
    });
});

// –ú–∞—Ä—à—Ä—É—Ç—ã
app.post('/api/orders', async (req, res) => {
    try {
        console.log('Received order request:', req.body); // –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        const requiredFields = ['name', 'surname', 'email', 'phone', 'service'];
        const missingFields = requiredFields.filter(field => !req.body[field]);
        
        if (missingFields.length > 0) {
            return res.status(400).json({
                success: false,
                message: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`
            });
        }

        const { name, surname, email, phone, service, company, message } = req.body;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            return res.status(400).json({
                success: false,
                message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        const phoneRegex = /^\+?[\d\s-]{10,}$/;
        if (!phoneRegex.test(phone)) {
            return res.status(400).json({
                success: false,
                message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
            });
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        const order = new Order({
            name,
            surname,
            email,
            phone,
            service,
            company,
            message,
            createdAt: new Date()
        });

        await order.save();
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
        const notificationSent = await sendTelegramNotification(req.body, 'order');
        
        res.status(201).json({
            success: true,
            message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
            order,
            notificationSent
        });
    } catch (error) {
        console.error('Order creation error:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞',
            error: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});

app.post('/api/contact', async (req, res) => {
    try {
        console.log('Received contact request:', req.body); // –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
        const { name, email, message } = req.body;
        
        if (!name || !email || !message) {
            return res.status(400).json({
                success: false,
                message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            return res.status(400).json({
                success: false,
                message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'
            });
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        const contact = new Contact({
            name,
            email,
            message,
            createdAt: new Date()
        });

        await contact.save();
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
        const notificationSent = await sendTelegramNotification({ name, email, message }, 'contact');
        
        res.status(201).json({
            success: true,
            message: '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
            contact,
            notificationSent
        });
    } catch (error) {
        console.error('Contact message error:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
            error: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});

app.get('/api/orders', async (req, res) => {
    try {
        const orders = await Order.find().sort({ createdAt: -1 });
        res.json(orders);
    } catch (error) {
        console.error('Get orders error:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤',
            error: error.message
        });
    }
});

app.get('/api/contacts', async (req, res) => {
    try {
        const contacts = await Contact.find().sort({ createdAt: -1 });
        res.json(contacts);
    } catch (error) {
        console.error('Get contacts error:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π',
            error: error.message
        });
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞
app.post('/api/quick-order', async (req, res) => {
    try {
        console.log('Received quick order request:', req.body);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        const { name, phone, service } = req.body;
        
        if (!name || !phone || !service) {
            return res.status(400).json({
                success: false,
                message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
            });
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        const phoneRegex = /^\+?[\d\s-]{10,}$/;
        if (!phoneRegex.test(phone)) {
            return res.status(400).json({
                success: false,
                message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
            });
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞
        const quickOrder = new Order({
            name,
            phone,
            service,
            createdAt: new Date()
        });

        await quickOrder.save();
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
        const notificationSent = await sendTelegramNotification({
            name,
            phone,
            service,
            type: 'quick-order'
        }, 'order');
        
        res.status(201).json({
            success: true,
            message: '–ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
            order: quickOrder,
            notificationSent
        });
    } catch (error) {
        console.error('Quick order creation error:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞',
            error: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
}); 